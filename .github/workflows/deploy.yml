name: Deploy to AWS Elastic Beanstalk

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18'
  AWS_REGION: us-east-1

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests (if any)
      run: npm test --if-present
      
    - name: Build check
      run: npm run build --if-present

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Install EB CLI
      run: |
        pip install awsebcli
        
    - name: Deploy to Elastic Beanstalk
      run: |
        # Create .elasticbeanstalk/config.yml if it doesn't exist
        if [ ! -f .elasticbeanstalk/config.yml ]; then
          echo "Initializing Elastic Beanstalk configuration..."
          eb init --platform "Node.js" --region ${{ env.AWS_REGION }} --platform-version "Node.js 18" --application-name "${{ secrets.EB_APPLICATION_NAME }}" --environment-name "${{ secrets.EB_ENVIRONMENT_NAME }}" --service-role "${{ secrets.EB_SERVICE_ROLE }}"
        fi
        
        # Show EB status before deployment
        echo "Current EB status:"
        eb status --environment "${{ secrets.EB_ENVIRONMENT_NAME }}" --region ${{ env.AWS_REGION }}
        
        # Deploy to existing environment
        echo "Starting deployment to Elastic Beanstalk..."
        eb deploy --environment "${{ secrets.EB_ENVIRONMENT_NAME }}" --region ${{ env.AWS_REGION }} --timeout 20
        
        # Show deployment status
        echo "Deployment completed. Current status:"
        eb status --environment "${{ secrets.EB_ENVIRONMENT_NAME }}" --region ${{ env.AWS_REGION }}
        
    - name: Health check
      run: |
        # Wait a bit for deployment to stabilize
        sleep 60
        
        # Get the EB environment URL
        EB_URL=$(eb status --environment "${{ secrets.EB_ENVIRONMENT_NAME }}" --region ${{ env.AWS_REGION }} --output json | jq -r '.Environment.CNAME')
        
        # Test the health endpoint
        curl -f "http://$EB_URL/health" || exit 1
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
