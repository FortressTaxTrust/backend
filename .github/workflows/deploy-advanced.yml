name: Deploy to AWS Elastic Beanstalk (Advanced)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  AWS_REGION: us-east-1

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Check for known vulnerabilities
      run: |
        if npm audit --audit-level high; then
          echo "No high severity vulnerabilities found"
        else
          echo "High severity vulnerabilities found - please review"
          exit 1
        fi

  test:
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test --if-present
      
    - name: Build check
      run: npm run build --if-present
      
    - name: Lint check
      run: npm run lint --if-present

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Install EB CLI
      run: |
        pip install awsebcli
        
    - name: Configure Elastic Beanstalk
      run: |
        # Create EB configuration directory
        mkdir -p .elasticbeanstalk
        
        # Create config.yml if it doesn't exist
        if [ ! -f .elasticbeanstalk/config.yml ]; then
          cat > .elasticbeanstalk/config.yml << EOF
        branch-defaults:
          main:
            environment: ${{ secrets.EB_STAGING_ENVIRONMENT }}
            group_suffix: null
        global:
          application_name: ${{ secrets.EB_APPLICATION_NAME }}
          branch: null
          default_ec2_keyname: null
          default_platform: Node.js 18
          default_region: ${{ env.AWS_REGION }}
          include_git_submodules: true
          instance_profile: null
          platform_name: null
          platform_version: null
          profile: null
          repository: null
          sc: git
          workspace_type: Application
        EOF
        fi
        
        # Show EB configuration
        echo "Elastic Beanstalk configuration:"
        cat .elasticbeanstalk/config.yml
        
    - name: Deploy to Staging
      run: |
        # Initialize EB if needed
        if [ ! -f .elasticbeanstalk/config.yml ]; then
          eb init --platform "Node.js" --region ${{ env.AWS_REGION }} --platform-version "Node.js 18" --application-name "${{ secrets.EB_APPLICATION_NAME }}" --environment-name "${{ secrets.EB_STAGING_ENVIRONMENT }}" --service-role "${{ secrets.EB_SERVICE_ROLE }}"
        fi
        
        # Show current EB status
        echo "Current Elastic Beanstalk status:"
        eb status --environment "${{ secrets.EB_STAGING_ENVIRONMENT }}" --region ${{ env.AWS_REGION }}
        
        # Deploy to staging with timeout
        echo "Starting deployment to Elastic Beanstalk staging..."
        eb deploy --environment "${{ secrets.EB_STAGING_ENVIRONMENT }}" --region ${{ env.AWS_REGION }} --timeout 20
        
        # Wait for deployment to complete
        echo "Waiting for deployment to stabilize..."
        eb status --environment "${{ secrets.EB_STAGING_ENVIRONMENT }}" --region ${{ env.AWS_REGION }} --wait
        
        # Show environment info
        echo "Environment information:"
        eb printenv --environment "${{ secrets.EB_STAGING_ENVIRONMENT }}" --region ${{ env.AWS_REGION }} || echo "No environment variables set"
        
    - name: Staging Health Check
      run: |
        sleep 30
        EB_URL=$(eb status --environment "${{ secrets.EB_STAGING_ENVIRONMENT }}" --region ${{ env.AWS_REGION }} --output json | jq -r '.Environment.CNAME')
        curl -f "http://$EB_URL/health" || exit 1

  deploy-production:
    needs: [test, deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Install EB CLI
      run: |
        pip install awsebcli
        
    - name: Deploy to Production
      run: |
        # Set production environment variables
        echo "Setting production environment variables..."
        eb setenv NODE_ENV=production --environment "${{ secrets.EB_PRODUCTION_ENVIRONMENT }}" --region ${{ env.AWS_REGION }} || true
        
        # Deploy to production with timeout
        echo "Starting production deployment to Elastic Beanstalk..."
        eb deploy --environment "${{ secrets.EB_PRODUCTION_ENVIRONMENT }}" --region ${{ env.AWS_REGION }} --timeout 30
        
        # Wait for deployment to complete
        echo "Waiting for production deployment to stabilize..."
        eb status --environment "${{ secrets.EB_PRODUCTION_ENVIRONMENT }}" --region ${{ env.AWS_REGION }} --wait
        
    - name: Production Health Check
      run: |
        sleep 60
        EB_URL=$(eb status --environment "${{ secrets.EB_PRODUCTION_ENVIRONMENT }}" --region ${{ env.AWS_REGION }} --output json | jq -r '.Environment.CNAME')
        curl -f "http://$EB_URL/health" || exit 1
        
    - name: Notify Production Deployment
      if: success()
      run: |
        echo "🚀 Production deployment successful!"
        echo "Environment: ${{ secrets.EB_PRODUCTION_ENVIRONMENT }}"
        echo "Region: ${{ env.AWS_REGION }}"

  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-staging.result }}" == "success" ] && [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ All deployments successful!"
        elif [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          echo "✅ Staging deployment successful!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi
